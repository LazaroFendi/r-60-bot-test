#!/usr/bin/env python3
"""
Script helper para ejecutar y gestionar el R-60 Bot
Proporciona comandos √∫tiles para desarrollo y producci√≥n
"""

import sys
import argparse
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

import config
from src.utils.logger import logger


def check_setup():
    """Verifica que el setup est√© completo"""
    print("üîç Verificando configuraci√≥n del R-60 Bot...\n")
    
    issues = []
    warnings = []
    
    # 1. Verificar archivo .env
    env_file = Path('.env')
    if not env_file.exists():
        issues.append("‚ùå Archivo .env no encontrado. Copia env.example a .env")
    else:
        print("‚úÖ Archivo .env encontrado")
    
    # 2. Verificar credentials.json
    if not config.CREDENTIALS_FILE.exists():
        issues.append(f"‚ùå credentials.json no encontrado en {config.CREDENTIALS_FILE}")
    else:
        print("‚úÖ credentials.json encontrado")
    
    # 3. Verificar token.json
    if not config.TOKEN_FILE.exists():
        warnings.append(f"‚ö†Ô∏è  token.json no encontrado (se generar√° en la primera ejecuci√≥n)")
    else:
        print("‚úÖ token.json encontrado")
    
    # 4. Verificar variables de entorno
    try:
        config.validate_config()
        print("‚úÖ Variables de entorno configuradas correctamente")
    except ValueError as e:
        issues.append(f"‚ùå {e}")
    
    # 5. Verificar carpetas
    for folder in [config.TEMP_DIR, config.LOGS_DIR, config.CREDENTIALS_DIR]:
        if folder.exists():
            print(f"‚úÖ Carpeta {folder.name}/ existe")
        else:
            warnings.append(f"‚ö†Ô∏è  Carpeta {folder} no existe (se crear√° autom√°ticamente)")
    
    # Resumen
    print("\n" + "=" * 60)
    if issues:
        print("üî¥ PROBLEMAS ENCONTRADOS:")
        for issue in issues:
            print(f"  {issue}")
    
    if warnings:
        print("\nüü° ADVERTENCIAS:")
        for warning in warnings:
            print(f"  {warning}")
    
    if not issues and not warnings:
        print("üéâ ¬°Todo est√° configurado correctamente!")
    elif not issues:
        print("\n‚úÖ Configuraci√≥n b√°sica completa (advertencias pueden ignorarse)")
    
    print("=" * 60)
    
    return len(issues) == 0


def run_bot():
    """Ejecuta el bot principal"""
    print("üöÄ Iniciando R-60 Bot...\n")
    
    from main import main
    main()


def test_auth():
    """Prueba solo la autenticaci√≥n"""
    print("üîê Probando autenticaci√≥n con Google...\n")
    
    try:
        from src.auth.google_auth import get_google_credentials
        
        creds = get_google_credentials()
        print("\n‚úÖ Autenticaci√≥n exitosa!")
        print(f"Scopes: {', '.join(creds.scopes)}")
        
        if config.TOKEN_FILE.exists():
            print(f"Token guardado en: {config.TOKEN_FILE}")
    
    except Exception as e:
        print(f"\n‚ùå Error en autenticaci√≥n: {e}")
        return False
    
    return True


def test_parser(file_path: str):
    """Prueba el parser con un archivo espec√≠fico"""
    from src.parsers.excel_parser import parse_r60_form
    
    test_file = Path(file_path)
    
    if not test_file.exists():
        print(f"‚ùå Archivo no encontrado: {test_file}")
        return False
    
    print(f"üìä Parseando archivo: {test_file.name}\n")
    
    try:
        result = parse_r60_form(test_file)
        
        print("‚úÖ Formulario parseado exitosamente!\n")
        print(f"Tipo: {result['tipo_formulario']}")
        print(f"N√∫mero: {result['numero_formulario']}")
        print(f"Fecha: {result['fecha']}")
        print(f"Solicitante: {result['solicitante']}")
        print(f"√Årea: {result['area']}")
        print(f"√çtems: {len(result['items'])}")
        
        print("\nPrimeros 3 √≠tems:")
        for i, item in enumerate(result['items'][:3], 1):
            print(f"  {i}. N¬∫ {item['numero_item']}: {item['campo1']}")
        
        return True
    
    except Exception as e:
        print(f"‚ùå Error al parsear: {e}")
        import traceback
        traceback.print_exc()
        return False


def revoke_auth():
    """Revoca la autenticaci√≥n (elimina token.json)"""
    print("üîì Revocando autenticaci√≥n...\n")
    
    from src.auth.google_auth import GoogleAuthenticator
    
    GoogleAuthenticator.revoke_credentials()
    print("‚úÖ Token eliminado. Se requerir√° nueva autenticaci√≥n en la pr√≥xima ejecuci√≥n.")


def show_info():
    """Muestra informaci√≥n del sistema"""
    import platform
    
    print("üìã Informaci√≥n del Sistema R-60 Bot\n")
    print("=" * 60)
    print(f"Python: {platform.python_version()}")
    print(f"SO: {platform.system()} {platform.release()}")
    print(f"Directorio: {Path.cwd()}")
    print(f"\nSheet ID: {config.GOOGLE_SHEET_ID[:20]}..." if config.GOOGLE_SHEET_ID else "No configurado")
    print(f"Drive Folder ID: {config.GOOGLE_DRIVE_FOLDER_ID[:20]}..." if config.GOOGLE_DRIVE_FOLDER_ID else "No configurado")
    print(f"Email notificaciones: {config.NOTIFICATION_EMAIL}")
    print(f"Query Gmail: {config.GMAIL_QUERY}")
    print(f"Nivel de log: {config.LOG_LEVEL}")
    print(f"Max emails/ejecuci√≥n: {config.MAX_EMAILS_PER_RUN}")
    print("=" * 60)


def main():
    parser = argparse.ArgumentParser(
        description='R-60 Bot - Sistema de automatizaci√≥n de formularios',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Ejemplos de uso:
  python run.py check          # Verificar configuraci√≥n
  python run.py run            # Ejecutar el bot
  python run.py test-auth      # Probar autenticaci√≥n
  python run.py test-parser archivo.xlsx  # Probar parser
  python run.py info           # Ver informaci√≥n del sistema
  python run.py revoke         # Revocar autenticaci√≥n
        '''
    )
    
    parser.add_argument(
        'command',
        choices=['check', 'run', 'test-auth', 'test-parser', 'revoke', 'info'],
        help='Comando a ejecutar'
    )
    
    parser.add_argument(
        'file',
        nargs='?',
        help='Archivo para test-parser'
    )
    
    args = parser.parse_args()
    
    # Ejecutar comando
    if args.command == 'check':
        success = check_setup()
        sys.exit(0 if success else 1)
    
    elif args.command == 'run':
        run_bot()
    
    elif args.command == 'test-auth':
        success = test_auth()
        sys.exit(0 if success else 1)
    
    elif args.command == 'test-parser':
        if not args.file:
            print("‚ùå Error: Debes especificar un archivo para parsear")
            print("Uso: python run.py test-parser <archivo.xlsx>")
            sys.exit(1)
        success = test_parser(args.file)
        sys.exit(0 if success else 1)
    
    elif args.command == 'revoke':
        revoke_auth()
    
    elif args.command == 'info':
        show_info()


if __name__ == '__main__':
    main()


